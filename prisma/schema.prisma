generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  email             String         @unique
  hash              String
  firstName         String?
  lastName          String?
  confirmationToken String?        @unique
  isConfirmed       Boolean        @default(false)
  customer          Customer[]
  sync              Sync[]
  auftraege         Auftrag[]
  auftraggeber      Auftraggeber[]
  bookmarks         Bookmark[]

  @@map("users")
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}

model Customer {
  id        Int     @id @default(autoincrement())
  istaId    Int?
  firstName String?
  lastName  String?
  name1     String?
  name2     String?
  city      String?
  postcode  String?
  country   String?
  telephone String?

  phoneNumber    String?
  street         String?
  zipCode        String?
  userId         Int?
  email          String?
  createdAt      DateTime? @default(now())
  place          String?
  updatedAt      DateTime? @updatedAt
  companyName    String?
  fax            String?
  propertyNumber Int?
  addressId      Int?
  address        Address?
  user           User?     @relation(fields: [userId], references: [id])
  orders         Order[]
  objekt         Objekt[]

  contactPerson   ContactPerson? @relation(fields: [contactPersonId], references: [id])
  contactPersonId Int?           @unique

  @@map("Customer")
}

model ContactPerson {
  id              Int        @id @default(autoincrement())
  salutation      String?
  name            String?
  forename        String?
  telephone       String?
  telephoneMobile String?
  role            String?
  Property        Property[]

  customerId Int?      @unique
  Customer   Customer?

  @@map("contactPerson")
}

model Auftrag {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  done                 Boolean?
  emailEingang         DateTime?
  bemerkung            String?
  vorgemerkt           String?
  hmName               String?
  hmTel                String?
  userId               Int
  auftraggeberId       Int?
  emailId              Int?                  @unique
  objektId             Int?                  @unique
  vwDynamischId        Int?
  vwStatischId         Int?
  mail                 String?
  auftraggeber         Auftraggeber?         @relation(fields: [auftraggeberId], references: [id])
  email                Email?                @relation(fields: [emailId], references: [id])
  objekt               Objekt?               @relation(fields: [objektId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  vwDynamisch          Vw?                   @relation("VsDynamischToAuftrag", fields: [vwDynamischId], references: [id])
  vwStatisch           Vw?                   @relation("VsStatischToAuftrag", fields: [vwStatischId], references: [id])
  auftragsBestaetigung AuftragsBestaetigung?

  @@map("auftrag")
}

model Email {
  id                   Int      @id @default(autoincrement())
  emailBetreff         String?
  emailAnhang          String?
  bestatigungVersendet Boolean?
  anfrageThema         String?
  anfrageBestatigt     Boolean?
  angebotErstellt      Boolean?
  angebotsnummer       String?
  angebot              String?
  auftrag              Auftrag?

  @@map("email")
}

model Objekt {
  id         Int       @id @default(autoincrement())
  liNr       String?
  adresseLi  String?
  plzLi      String?
  ortLi      String?
  customerId Int?
  auftrag    Auftrag?
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@map("objekt")
}

model Vw {
  id                 Int       @id @default(autoincrement())
  vwBuro             String?
  vwMa               String?
  mailadresseVw      String?
  telVw              String?
  auftraegeDynamisch Auftrag[] @relation("VsDynamischToAuftrag")
  auftraegeStatisch  Auftrag[] @relation("VsStatischToAuftrag")

  @@map("vw")
}

model AuftragsBestaetigung {
  id                 Int       @id @default(autoincrement())
  auftragbestatigung Boolean?
  vwBestatigung      String?
  terminiertZum      DateTime?
  uhrzeit            DateTime?
  aushang            Boolean?
  datumAushang       DateTime?
  agInformiert       Boolean?
  bgb                Boolean?
  bgbBericht         Boolean?
  ssa                Boolean?
  bericht            Boolean?
  umb                Boolean?
  ber                Boolean?
  reNr               String?
  reBetrag           Decimal?
  reErhalten         Boolean?
  reNr2              String?
  reBetrag2          Decimal?
  reNr2Erhalten      Boolean?
  dateien            String?
  mahnung            Boolean?
  mahnung1           Boolean?
  mahnungErhaten     Boolean?
  auftragId          Int?      @unique
  auftrag            Auftrag?  @relation(fields: [auftragId], references: [id])

  @@map("auftragsbestaetigung")
}

model Auftraggeber {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  userId           Int?
  ap               String?
  email            String?
  ort              String?
  plz              Int?
  strasse          String?
  tel              String?
  auftraggebername String?
  auftraege        Auftrag[]
  user             User?     @relation(fields: [userId], references: [id])

  @@map("auftraggeber")
}

model Order {
  id                         Int                          @id @default(autoincrement())
  propertyNumber             Int?
  orderNumberIsta            String?
  number                     String?
  remarkExternal             String?
  createdAt                  DateTime                     @default(now())
  actualStatus               Status                       @default(RECEIVED)
  customerId                 Int
  updatedAt                  DateTime?                    @updatedAt
  Cancelled                  Cancelled[]
  ClosedContractPartner      ClosedContractPartner[]
  customerContacts           CustomerContact[]
  ExecutionOnSiteNotPossible ExecutionOnSiteNotPossible[]
  NotPossible                NotPossible[]
  Customer                   Customer                     @relation(fields: [customerId], references: [id])
  status                     OrderStatus[]
  Planned                    Planned[]
  Postponed                  Postponed[]
  Received                   Received[]
  Rejected                   Rejected[]

  serviceType             String?
  executionFlag           Boolean?
  releasedOn              DateTime?
  drinkingWaterFacility   DrinkingWaterFacility? @relation(fields: [drinkingWaterFacilityId], references: [id])
  drinkingWaterFacilityId Int?
  property                Property?              @relation(fields: [propertyId], references: [id])
  propertyId              Int?

  @@map("Order")
}

model OrderStatus {
  id                  Int       @id @default(autoincrement())
  type                String?
  setOn               DateTime? @default(now())
  executionOnSiteDone Boolean?
  orderId             Int
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  order               Order     @relation(fields: [orderId], references: [id])
}

model CustomerContact {
  id                           Int                         @id @default(autoincrement())
  contactAttemptOn             DateTime?
  contactPersonCustomer        String?
  agentCP                      String?
  result                       String?
  remark                       String?
  orderId                      Int?
  plannedId                    Int?
  receivedId                   Int?
  statusReportId               Int?
  executionOnSiteNotPossibleId Int?
  ExecutionOnSiteNotPossible   ExecutionOnSiteNotPossible? @relation(fields: [executionOnSiteNotPossibleId], references: [id])
  order                        Order?                      @relation(fields: [orderId], references: [id])
  planned                      Planned?                    @relation(fields: [plannedId], references: [id])
  received                     Received?                   @relation(fields: [receivedId], references: [id])
  statusReport                 StatusReport?               @relation(fields: [statusReportId], references: [id])
  ClosedContractPartner        ClosedContractPartner[]     @relation("ClosedContractPartnerToCustomerContact")
}

model ReportOrderStatusRequest {
  id                      Int                    @id @default(autoincrement())
  environment             String
  language                String
  consumer                String
  closedContractPartnerId Int?
  closedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
}

model ClosedContractPartner {
  id                              Int                        @id @default(autoincrement())
  orderId                         Int?
  orderstatusType                 Int?
  setOn                           DateTime?                  @default(now())
  deficiencyDescription           String?
  registrationHealthAuthoritiesOn DateTime?                  @default(now())
  extraordinaryExpenditureReason  String?
  createdAt                       DateTime?                  @default(now())
  updatedAt                       DateTime?                  @updatedAt
  syncDataId                      Int?                       @unique
  order                           Order?                     @relation(fields: [orderId], references: [id])
  Contact                         Contact[]
  recordedSystem                  RecordedSystem[]
  ReportOrderStatusRequest        ReportOrderStatusRequest[]
  services                        Service[]
  suppliedDocuments               SuppliedDocuments[]
  syncData                        Sync?
  customerContacts                CustomerContact[]          @relation("ClosedContractPartnerToCustomerContact")
}

model SuppliedDocuments {
  id                      Int                    @id @default(autoincrement())
  closedContractPartnerId Int?
  documentId              Int?
  ClosedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
  document                Document?              @relation(fields: [documentId], references: [id])
}

model Document {
  id                Int                 @id @default(autoincrement())
  type              String
  content           String
  SuppliedDocuments SuppliedDocuments[]
}

model RecordedSystem {
  id                      Int                    @id @unique @default(autoincrement())
  closedContractPartnerId Int?                   @default(autoincrement())
  drinkingWaterFacility   DrinkingWaterFacility?
  property                Property?
  ClosedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
}

model Property {
  id                   Int  @id @default(autoincrement())
  number               Int?
  id_HealthAuthorities Int?

  contactPersonId Int?
  contactPerson   ContactPerson? @relation(fields: [contactPersonId], references: [id])

  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  userAddresses UserAddress[]

  building Building[]

  hotwatersupplyType_central   Boolean?
  hotwatersupplyType_decentral Boolean?
  recordedSystemId             Int?            @unique
  recordedSystem               RecordedSystem? @relation(fields: [recordedSystemId], references: [id])
  Order                        Order[]
}

model UserAddress {
  id Int @id @default(autoincrement())

  salutation   String?
  name         String?
  street       String?
  streetnumber Int?
  postcode     Int?
  city         String?
  country      String?
  Property     Property? @relation(fields: [propertyId], references: [id])
  propertyId   Int?
}

model Service {
  id                       Int                    @id @default(autoincrement())
  articleNumber_ista       Int?
  quantity                 Int?
  unit                     String?
  extraordinaryExpenditure Boolean?
  purchasePrice_ista       Float?
  warranty                 Boolean?
  addressId                Int?
  closedContractPartnerId  Int?
  serviceRenderedIn        Address?               @relation(fields: [addressId], references: [id])
  ClosedContractPartner    ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
}

model DrinkingWaterFacility {
  id                                          Int                   @id @default(autoincrement())
  consecutiveNumber                           Int?
  usageType                                   String?
  usageTypeOthers                             String?
  numberSuppliedUnits                         Int?
  numberDrinkingWaterHeater                   Int?
  totalVolumeLitres                           Int?
  pipingSystemType_Circulation                Boolean?
  pipingSystemType_Waterbranchline            Boolean?
  pipingSystemType_Pipetraceheater            Boolean?
  pipingVolumeGr3Litres                       Boolean?
  deadPipeKnown                               Boolean?
  deadPipesPosition                           String?
  numberAscendingPipes                        Int?
  aerosolformation                            Boolean?
  explanation                                 String?
  numberSuppliedPersons                       Int?
  pipeworkSchematicsAvailable                 Boolean?
  numberColdWaterLegs                         Int?
  numberHotWaterLegs                          Int?
  temperatureCirculationDWH_A                 Int?
  temperatureCirculationDWH_B                 Int?
  heatExchangerSystem_central                 Boolean?
  heatExchangerSystem_districtheating         Boolean?
  heatExchangerSystem_continuousflowprinciple Boolean?
  recordedSystemId                            Int?                  @unique
  ascendingPipes                              AscendingPipe[]
  RecordedSystem                              RecordedSystem?       @relation(fields: [recordedSystemId], references: [id])
  drinkingWaterHeaters                        DrinkingWaterHeater[]
  samplingPoints                              SamplingPoint[]
  Order                                       Order[]
}

model DrinkingWaterHeater {
  id                              Int                    @id @default(autoincrement())
  consecutiveNumber               Int?
  inletTemperatureDisplayPresent  Boolean?
  inletTemperature                Int?
  outletTemperatureDisplayPresent Boolean?
  outletTemperature               Int?
  pipeDiameterOutlet              String?
  pipeMaterialtypeOutlet          String?
  volumeLitre                     Int?
  roomType                        String?
  roomPosition                    Int?
  positionDetail                  String?
  drinkingWaterFacilityId         Int?
  DrinkingWaterFacility           DrinkingWaterFacility? @relation(fields: [drinkingWaterFacilityId], references: [id])

  unit Unit?
}

model Unit {
  id                    Int                  @id @unique @default(autoincrement())
  floor                 Int?
  storey                String?
  position              Int?
  userName              String?
  generalUnit           Boolean?
  drinkingWaterHeaterId Int?                 @unique
  DrinkingWaterHeater   DrinkingWaterHeater? @relation(fields: [drinkingWaterHeaterId], references: [id])
  SamplingPoint         SamplingPoint[]

  buildingId Int
  building   Building @relation(fields: [buildingId], references: [id])
}

model AscendingPipe {
  id                                     Int                   @id @default(autoincrement())
  consecutiveNumber                      Int?
  ascendingPipeTemperatureDisplayPresent Boolean?
  flowTemperature                        Int?
  circulationTemperatureDisplayPresent   Boolean?
  circulationTemperature                 Int?
  pipeDiameter                           String?
  pipeMaterialtype                       String?
  drinkingWaterFacilityId                Int
  DrinkingWaterFacility                  DrinkingWaterFacility @relation(fields: [drinkingWaterFacilityId], references: [id])
}

model SamplingPoints {
  id            Int             @id @default(autoincrement())
  samplingPoint SamplingPoint[]
}

model SamplingPoint {
  id                               Int                   @id @default(autoincrement())
  consecutiveNumber                Int?
  installationNumber               Int?
  numberObjectInstallationLocation Int?
  pipingSystemType                 String?
  remoteSamplingPoint              Boolean?
  roomType                         String?
  roomPosition                     Int?
  positionDetail                   String?
  unitId                           Int
  drinkingWaterFacilityId          Int
  samplingPointsId                 Int?
  DrinkingWaterFacility            DrinkingWaterFacility @relation(fields: [drinkingWaterFacilityId], references: [id])
  SamplingPoints                   SamplingPoints?       @relation(fields: [samplingPointsId], references: [id])
  unit                             Unit                  @relation(fields: [unitId], references: [id])
}

model Building {
  id        Int     @id @default(autoincrement())
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])
  Unit      Unit[]

  street       String?
  streetnumber String?
  postcode     String?
  city         String?
  country      String?
  Property     Property? @relation(fields: [propertyId], references: [id])
  propertyId   Int?
}

model Address {
  id           Int        @id @default(autoincrement())
  street       String?
  streetnumber String?
  postcode     String?
  city         String?
  country      String?
  createdAt    DateTime   @default(now())
  customerId   Int?       @unique
  updatedAt    DateTime   @updatedAt
  houseNumber  String?
  customer     Customer?  @relation(fields: [customerId], references: [id])
  building     Building[]
  Service      Service[]
  Property     Property[]
}

model Envelope {
  id       Int    @id @default(autoincrement())
  headerId Int    @unique
  bodyId   Int    @unique
  Body     Body   @relation(fields: [bodyId], references: [id])
  Header   Header @relation(fields: [headerId], references: [id])
}

model Header {
  id       Int       @id @default(autoincrement())
  Envelope Envelope?
}

model Body {
  id        Int       @id @default(autoincrement())
  requestId Int       @unique
  Request   Request   @relation(fields: [requestId], references: [id])
  Envelope  Envelope?
}

model Request {
  id            Int          @id @default(autoincrement())
  environment   String
  language      String
  consumer      String
  rejectedId    Int?
  notPossibleId Int?
  postponedId   Int?
  cancelledId   Int?
  plannedId     Int?
  receivedId    Int?
  Body          Body?
  Cancelled     Cancelled?
  NotPossible   NotPossible?
  Planned       Planned?
  Postponed     Postponed?
  Received      Received?
  Rejected      Rejected?
}

model Postponed {
  id                   Int       @id @default(autoincrement())
  requestId            Int?      @unique
  orderId              Int
  statusType           String
  setOn                DateTime? @default(now())
  nextContactAttemptOn DateTime
  postponedReason      String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  syncDataId           Int?      @unique
  Contact              Contact[]
  Order                Order     @relation(fields: [orderId], references: [id])
  Request              Request?  @relation(fields: [requestId], references: [id])
  syncData             Sync?
}

model Rejected {
  id                  Int       @id @default(autoincrement())
  requestId           Int?      @unique
  orderId             Int
  statusType          Int?
  setOn               DateTime? @default(now())
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  rejectionReason     String?
  rejectionReasonText String?
  syncDataId          Int?      @unique
  Contact             Contact[]
  Order               Order     @relation(fields: [orderId], references: [id])
  Request             Request?  @relation(fields: [requestId], references: [id])
  syncData            Sync?
}

model NotPossible {
  id         Int       @id @default(autoincrement())
  requestId  Int?      @unique
  orderId    Int
  statusType String?
  setOn      DateTime? @default(now())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  syncDataId Int?      @unique
  Contact    Contact[]
  Order      Order     @relation(fields: [orderId], references: [id])
  Request    Request?  @relation(fields: [requestId], references: [id])
  syncData   Sync?
}

model Contact {
  id                      Int                    @id @default(autoincrement())
  contactAttemptOn        DateTime
  contactPerson           String?
  agentCP                 String?
  result                  String?
  remark                  String?
  notPossibleId           Int?
  rejectedId              Int?
  postponedId             Int?
  cancelledId             Int?
  closedContractPartnerId Int?
  createdAt               DateTime?              @default(now())
  receivedId              Int?
  updatedAt               DateTime?              @updatedAt
  Cancelled               Cancelled?             @relation(fields: [cancelledId], references: [id])
  ClosedContractPartner   ClosedContractPartner? @relation(fields: [closedContractPartnerId], references: [id])
  NotPossible             NotPossible?           @relation(fields: [notPossibleId], references: [id])
  Postponed               Postponed?             @relation(fields: [postponedId], references: [id])
  Received                Received?              @relation(fields: [receivedId], references: [id])
  Rejected                Rejected?              @relation(fields: [rejectedId], references: [id])
}

model Cancelled {
  id                 Int       @id @default(autoincrement())
  requestId          Int?      @unique
  orderId            Int
  statusType         String?
  setOn              DateTime? @default(now())
  cancellationReason String
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  syncDataId         Int?      @unique
  Order              Order     @relation(fields: [orderId], references: [id])
  Request            Request?  @relation(fields: [requestId], references: [id])
  Contact            Contact[]
  syncData           Sync?
}

model Planned {
  id                          Int               @id @default(autoincrement())
  orderId                     Int
  orderstatusType             String?
  setOn                       DateTime?         @default(now())
  detailedScheduleDate        DateTime?
  detailedScheduleTimeFrom    String?
  detailedScheduleTimeTo      String?
  detailedScheduleDelayReason String?
  requestId                   Int?              @unique
  createdAt                   DateTime?         @default(now())
  updatedAt                   DateTime?         @updatedAt
  syncDataId                  Int?              @unique
  customerContacts            CustomerContact[]
  Order                       Order             @relation(fields: [orderId], references: [id])
  Request                     Request?          @relation(fields: [requestId], references: [id])
  syncData                    Sync?
}

model Received {
  id               Int               @id @default(autoincrement())
  orderId          Int
  orderstatusType  String            @default("007")
  setOn            DateTime?         @default(now())
  requestId        Int?              @unique
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
  syncDataId       Int?              @unique
  Contact          Contact[]
  customerContacts CustomerContact[]
  Order            Order             @relation(fields: [orderId], references: [id])
  Request          Request?          @relation(fields: [requestId], references: [id])
  syncData         Sync?
}

model ExecutionOnSiteNotPossible {
  id                 Int               @id @default(autoincrement())
  orderstatusType    String            @default("003")
  setOn              DateTime?         @default(now())
  requestId          Int?              @unique
  updatedAt          DateTime?         @updatedAt
  orderId            Int
  syncDataId         Int?              @unique
  nonExecutionReason String?
  customerContacts   CustomerContact[]
  Order              Order             @relation(fields: [orderId], references: [id])
  syncData           Sync?
}

model StatusReport {
  id               Int               @id @default(autoincrement())
  orderNo          String
  currentDatetime  DateTime
  customerContacts CustomerContact[]
}

model Sync {
  id                           Int                         @id @default(autoincrement())
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  lastSyncTime                 DateTime                    @default(now())
  statusType                   Status
  syncStatus                   String
  syncError                    String?
  userEmail                    String?
  userId                       Int
  receivedId                   Int?                        @unique
  plannedId                    Int?                        @unique
  postponedId                  Int?                        @unique
  rejectedId                   Int?                        @unique
  cancelledId                  Int?                        @unique
  notPossibleId                Int?                        @unique
  closedContractPartnerId      Int?                        @unique
  executionOnSiteNotPossibleId Int?                        @unique
  Cancelled                    Cancelled?                  @relation(fields: [cancelledId], references: [id])
  ClosedContractPartner        ClosedContractPartner?      @relation(fields: [closedContractPartnerId], references: [id])
  ExecutionOnSiteNotPossible   ExecutionOnSiteNotPossible? @relation(fields: [executionOnSiteNotPossibleId], references: [id])
  NotPossible                  NotPossible?                @relation(fields: [notPossibleId], references: [id])
  Planned                      Planned?                    @relation(fields: [plannedId], references: [id])
  Postponed                    Postponed?                  @relation(fields: [postponedId], references: [id])
  Received                     Received?                   @relation(fields: [receivedId], references: [id])
  Rejected                     Rejected?                   @relation(fields: [rejectedId], references: [id])
  user                         User                        @relation(fields: [userId], references: [id])
}

enum Auftragsstatus {
  Eingegangen
  Kundenkontakt_nicht_moeglich
  Kundenkontakt_verschoben
  Geplant
  Ausfuehrung_vor_Ort_erfolgt
  Ausfuehrung_vor_Ort_nicht_moeglich
  Abgeschlossen_Vertragspartner
  Abgelehnt
  Storniert
}

enum Status {
  RECEIVED
  PLANNED
  NOTPOSSIBLE
  POSTPONED
  REJECTED
  CLOSED
  CANCELLED
  DONE
  CLOSEDCONTRACTPARTNER
  EXECUTIONONSITENOTPOSSIBLE
}
